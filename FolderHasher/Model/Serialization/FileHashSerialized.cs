// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FolderHasher.Model.Serialization
{

    using global::System;
    using global::FlatBuffers;

    public struct FileHashSerialized : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static FileHashSerialized GetRootAsFileHashSerialized(ByteBuffer _bb) { return GetRootAsFileHashSerialized(_bb, new FileHashSerialized()); }
        public static FileHashSerialized GetRootAsFileHashSerialized(ByteBuffer _bb, FileHashSerialized obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
        public FileHashSerialized __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
        public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
        public ulong FileSize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public byte Sha2512Hash(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int Sha2512HashLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
        public ArraySegment<byte>? GetSha2512HashBytes() { return __p.__vector_as_arraysegment(8); }
        public byte FileSample(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
        public int FileSampleLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
        public ArraySegment<byte>? GetFileSampleBytes() { return __p.__vector_as_arraysegment(10); }

        public static Offset<FileHashSerialized> CreateFileHashSerialized(FlatBufferBuilder builder,
            StringOffset filePathOffset = default(StringOffset),
            ulong fileSize = 0,
            VectorOffset sha2512HashOffset = default(VectorOffset),
            VectorOffset fileSampleOffset = default(VectorOffset))
        {
            builder.StartObject(4);
            FileHashSerialized.AddFileSize(builder, fileSize);
            FileHashSerialized.AddFileSample(builder, fileSampleOffset);
            FileHashSerialized.AddSha2512Hash(builder, sha2512HashOffset);
            FileHashSerialized.AddFilePath(builder, filePathOffset);
            return FileHashSerialized.EndFileHashSerialized(builder);
        }

        public static void StartFileHashSerialized(FlatBufferBuilder builder) { builder.StartObject(4); }
        public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
        public static void AddFileSize(FlatBufferBuilder builder, ulong fileSize) { builder.AddUlong(1, fileSize, 0); }
        public static void AddSha2512Hash(FlatBufferBuilder builder, VectorOffset sha2512HashOffset) { builder.AddOffset(2, sha2512HashOffset.Value, 0); }
        public static VectorOffset CreateSha2512HashVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static void StartSha2512HashVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddFileSample(FlatBufferBuilder builder, VectorOffset fileSampleOffset) { builder.AddOffset(3, fileSampleOffset.Value, 0); }
        public static VectorOffset CreateFileSampleVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
        public static void StartFileSampleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static Offset<FileHashSerialized> EndFileHashSerialized(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<FileHashSerialized>(o);
        }
    };


}
